//Longest Substring Without Repeating Characters//
import java.util.*;
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character>set=new HashSet<>();
        int left=0,maxLength=0;
        for (int right=0; right < s.length();right++) {
            char ch=s.charAt(right);
            while(set.contains(ch)){
                set.remove(s.charAt(left));
                left++;
            }
            set.add(ch);
            maxLength=Math.max(maxLength,right-left+1);
        }
        return maxLength;
    }
}
5.	Max Consecutive Ones III (1004)
class Solution {
    public int longestOnes(int[] nums, int k) {
        int left = 0, maxLen = 0, zerosCount = 0;
        for (int right = 0; right < nums.length; right++) {
            if (nums[right] == 0) zerosCount++;
            while (zerosCount > k) {
                if (nums[left] == 0) zerosCount--;
                left++;
            }
            maxLen = Math.max(maxLen, right - left + 1);
        }
        return maxLen;
    }
}
2.	Permutation in String (567)
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length() > s2.length()) return false;
        char[] arr1 = s1.toCharArray();
        Arrays.sort(arr1);
        for(int i = 0; i <= s2.length() - s1.length(); i++) {
            String sub = s2.substring(i, i + s1.length());
            char[] arr2 = sub.toCharArray();
            Arrays.sort(arr2);
            if(Arrays.equals(arr1, arr2)) return true;
        }
        return false;
    }
}
3.	Find All Anagrams in a String (438)
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> list = new ArrayList<>();
        if(p.length() > s.length()) return list;
        char[] arr1 = p.toCharArray();
        Arrays.sort(arr1);
        for(int i = 0; i <= s.length() - p.length(); i++) {
            String sub = s.substring(i, i + p.length());
            char[] arr2 = sub.toCharArray();
            Arrays.sort(arr2);
            if(Arrays.equals(arr1, arr2)) list.add(i);
        }
        return list;
    }
}


