
//1. Minimum Number of Arrows to Burst Balloons//
public class Solution {
    public int findMinArrowShots(int[][] points) {
        if(points.length==0 || points==null){
            return 0;
        }
       Arrays.sort(points, Comparator.comparingLong(a -> (long) a[1]));
        long curr=points[0][1];
        int arrows=1;
        for(int i=0;i<points.length;i++){
            long start=points[i][0];
            long end=points[i][1];
            if(start>curr){
                arrows++;
                curr=end;
            }
        }
        return arrows;
        
    }
}
//3. Find First and Last Position of Element in Sorted Array//
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first=findfirst(nums,target);
        int last=findlast(nums,target);
        return new int[]{first,last};        
    }
    public int findfirst(int []nums,int target){
        int start=0;int end=nums.length-1;
        int ans=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                ans=mid;
                end=mid-1;
            }
            else if(nums[mid]>target){
                end=mid-1;
            }
            else{
                start=mid+1;

            }

        }
        return ans;

    } 
    public int findlast(int []nums,int target){
        int start=0;int end=nums.length-1;
        int ans=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                ans=mid;
                start=mid+1;
            }
            else if(nums[mid]>target){
                end=mid-1;
            }
            else{
                start=mid+1;

            }

        }
        return ans;

    }
}
