1.Evaluate Reverse Polish Notation
class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        for (String token : tokens) {
            if (token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/")) {
                int b = stack.pop();
                int a = stack.pop(); 
                int result = 0;
                switch (token) {
                    case "+": result = a + b; break;
                    case "-": result = a - b; break;
                    case "*": result = a * b; break;
                    case "/": result = a / b; break;
                }
                stack.push(result);
            } else {
                stack.push(Integer.parseInt(token));
            }
        }
        return stack.pop();
    }
}
2.Simplify Path
class Solution {
    public String simplifyPath(String path) {
        String[] parts = path.split("/");
        String[] stack = new String[parts.length];
        int idx = 0;        
        for (String part : parts) {
            if (part.equals("") || part.equals(".")) continue;
            else if (part.equals("..")) {
                if (idx > 0) idx--;
            } else {
                stack[idx++] = part;
            }
        }        
        if (idx == 0) return "/";      
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < idx; i++) {
            sb.append("/").append(stack[i]);
        }
        return sb.toString();
    }
}

