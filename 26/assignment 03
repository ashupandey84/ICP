//1.	Search a 2D Matrix//
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==target){
                    return true;
                }
            }
        }
        return false;
        
    }
}
//2.Spiral Matrix
import java.util.*;
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list = new ArrayList<>();       
        if(matrix == null || matrix.length == 0) return list;       
        int n = matrix.length;      
        int m = matrix[0].length;        
        int top = 0, bottom = n - 1;
        int left = 0, right = m - 1;       
        while(top <= bottom && left <= right) {
            for(int j = left; j <= right; j++) {
                list.add(matrix[top][j]);
            }
            top++;
            for(int i = top; i <= bottom; i++) {
                list.add(matrix[i][right]);
            }
            right--;
            if(top <= bottom) {
                for(int j = right; j >= left; j--) {
                    list.add(matrix[bottom][j]);
                }
                bottom--;
            }
            if(left <= right) {
                for(int i = bottom; i >= top; i--) {
                    list.add(matrix[i][left]);
                }
                left++;
            }
        }       
        return list;
    }
}  
//3. Number of Islands//
class Solution {
    static boolean isValid(int n_r, int n_c, int rows, int cols, boolean[][] visited, char[][] grid) {
        if (n_r >= 0 && n_r < rows && n_c >= 0 && n_c < cols 
            && !visited[n_r][n_c] && grid[n_r][n_c] != '0') {
            return true;
        }
        return false;
    }
    void dfs(boolean[][] visited, int c_r, int c_c, int rows, int cols, char[][] grid) {
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{c_r, c_c});
        visited[c_r][c_c] = true;
        int dr[] = {0, 1, 0, -1};
        int dc[] = {1, 0, -1, 0};
        while (!q.isEmpty()) {
            int[] cell = q.poll();
            int cur_row = cell[0];
            int cur_col = cell[1];
            for (int i = 0; i < 4; i++) {
                int new_r = cur_row + dr[i];
                int new_c = cur_col + dc[i];

                if (isValid(new_r, new_c, rows, cols, visited, grid)) {
                    visited[new_r][new_c] = true;
                    q.add(new int[]{new_r, new_c});
                }
            }
        }
    }
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j] && grid[i][j] != '0') {
                    dfs(visited, i, j, m, n, grid);
                    count++;
                }
            }
        }
        return count;
    }
}

    
